/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ulpgc.eii.diu;

import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.DefaultDesktopManager;
import javax.swing.DesktopManager;
import javax.swing.JComponent;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;

/**
 *
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Load the necessary library
     */
    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    /**
     * FileChooser for opening and saving files
     */
    JFileChooser fileChooser;

    /**
     * List of internal frames
     */
    ArrayList<InternalFrame> internalFrames;

    /**
     * Value of threshold chosen by JSlider
     */
    int thresholdValue;

    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPanel = new javax.swing.JDesktopPane();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        thresholdMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Treshold images");

        javax.swing.GroupLayout desktopPanelLayout = new javax.swing.GroupLayout(desktopPanel);
        desktopPanel.setLayout(desktopPanelLayout);
        desktopPanelLayout.setHorizontalGroup(
            desktopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        desktopPanelLayout.setVerticalGroup(
            desktopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 459, Short.MAX_VALUE)
        );

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);
        fileMenu.add(jSeparator1);

        thresholdMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        thresholdMenuItem.setText("Threshold");
        thresholdMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(thresholdMenuItem);
        fileMenu.add(jSeparator2);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPanel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handle "Open" menu item.
     * Get file from fileChooser and open it
     * @param evt Selected menu item
     */
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            openFile(fileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    /**
     * Handle "Threshold" menu item.
     * @param evt Selected menu item
     */
    private void thresholdMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdMenuItemActionPerformed
        showTresholdInputDialog();
    }//GEN-LAST:event_thresholdMenuItemActionPerformed

    /**
     * Handle "Exit" menu item.
     * @param evt Selected menu item
     */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        confirmCloseWindow();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * Initialization of controls after start of program.
     * Init fileChooser, disable menu items that cannot be used after start
     * and add listener for closing window via Cross.
     * Set desktop manager so internal panels cannot be moved outside visible area.
     */
    private void init() {
        FileFilter imageFilter = new FileNameExtensionFilter(
            "Image files", ImageIO.getReaderFileSuffixes());
        fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(imageFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        thresholdMenuItem.setEnabled(false);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                confirmCloseWindow();
            }
        });        
        internalFrames = new ArrayList<>();
        desktopPanel.setDragMode(JDesktopPane.LIVE_DRAG_MODE);
        
        DesktopManager manager = new DefaultDesktopManager() {
            @Override
            public void setBoundsForFrame(JComponent f, int newX, int newY, int newWidth, int newHeight) {
                boolean didResize = (f.getWidth() != newWidth || f.getHeight() != newHeight);
                if (!inBounds((JInternalFrame) f, newX, newY, newWidth, newHeight)) return;
                f.setBounds(newX, newY, newWidth, newHeight);
                if(didResize) {
                    f.validate();
                } 
            }

            protected boolean inBounds(JInternalFrame f, int newX, int newY, int newWidth, int newHeight) {
                if (newX < 0 || newY < 0) return false;
                if (newX + newWidth > f.getDesktopPane().getWidth()) return false;
                if (newY + newHeight > f.getDesktopPane().getHeight()) return false;
                return true;
            }
        };
        desktopPanel.setDesktopManager(manager);
    }

    /**
     * Method for computing bounds so the desktop pane 
     * cannot be set to size smaller than internal panes
     */
    public void computeBounds() {
        int x = 0;
        int y = 0;
        for (InternalFrame frame : internalFrames) {
            if (frame.getPoint().x > x) {
                x = frame.getPoint().x;
            }
            if (frame.getPoint().y > y) {
                y = frame.getPoint().y;
            }
        }
        y += mainMenuBar.getHeight();
        this.setMinimumSize(new Dimension(x, y));
    }
    
    /**
     * Open file chosen with fileChooser.
     * After loading file enable menu items to transform and save image.
     * @param file File to open
     */
    private void openFile(File file) {
        for (InternalFrame frame : internalFrames) {
            frame.dispose();
        }
        internalFrames.clear();       
        Mat mat = Imgcodecs.imread(file.getAbsolutePath());
        createInternalFrame(mat, file.getName());    
        thresholdMenuItem.setEnabled(true);
    }

    /**
     * Show dialog with input, control that input is number in range (0-255).
     * If input is correct, do the transformation, otherwise show error.
     * Afterwards, threshold cannot be done again, disable menu item.
     */
    private void showTresholdInputDialog() {    
        thresholdValue = 0;
        int confirmed = JOptionPane.showConfirmDialog(this, new Object[] { "Select a value:", getSlider() }, "Treshold", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);      
        if (confirmed == JOptionPane.OK_OPTION) {
            Mat original = internalFrames.get(0).getImagePanel().getMat();
            InternalFrame internalFrame = createInternalFrame(original, "Treshold: " + thresholdValue);
            internalFrame.getImagePanel().threshold(thresholdValue);
        }
    }

    /**
     * Show confirm dialog to close program when Exit menu item or Cross is clicked
     */
    private void confirmCloseWindow() {
        int confirmed = JOptionPane.showConfirmDialog(this, 
                "Are you sure you want to exit the program?", 
                "Exit Program",
                JOptionPane.YES_NO_OPTION);
        if (confirmed == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }

    /**
     * Create internal frame with given params
     * @param mat Image to be shown
     * @param title Title of internal pane
     * @return Internal pane instance
     */
    private InternalFrame createInternalFrame(Mat mat, String title) {
        InternalFrame internalFrame = new InternalFrame();      
        internalFrame.getImagePanel().setMat(mat);
        internalFrame.setIconifiable(true);
        internalFrame.setMaximizable(true);
        internalFrame.setClosable(true);
        internalFrame.setTitle(title);
        internalFrame.setLocation((internalFrames.size() * 20) % 200, (internalFrames.size() * 20) % 200);
        internalFrames.add(internalFrame);
        this.desktopPanel.add(internalFrame);
        internalFrame.show();
        
        return internalFrame;
    }
    
    /**
     * Create slider for threshold choosing.
     * @return Slider instance
     */
    private JSlider getSlider() {
        JSlider slider = new JSlider();
        slider.setMaximum(255);
        slider.setMinimum(0);
        slider.setMinorTickSpacing(10);
        slider.setMajorTickSpacing(50);
        slider.setValue(0);
        slider.setPaintTicks(true);
        slider.setPaintLabels(true);
        ChangeListener changeListener = (ChangeEvent changeEvent) -> {
            JSlider theSlider = (JSlider) changeEvent.getSource();
            thresholdValue = theSlider.getValue();
        };
        slider.addChangeListener(changeListener);
        return slider;
    }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem thresholdMenuItem;
    // End of variables declaration//GEN-END:variables
}
