/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ulpgc.eii.diu;

import java.awt.HeadlessException;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker.StateValue;

public class Frame extends javax.swing.JFrame {

    private JFileChooser inputFileChooser;
    private JFileChooser outputFileChooser;
    private File inputFile;
    private File outputFile;
    private ZipWorker zipWorker;

    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zipBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        inputTextField = new javax.swing.JTextField();
        outputTextField = new javax.swing.JTextField();
        inputBtn = new javax.swing.JButton();
        outputBtn = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compression app");
        setResizable(false);

        zipBtn.setText("Compress");
        zipBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zipBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        inputTextField.setEditable(false);

        outputTextField.setEditable(false);

        inputBtn.setText("Input folder");
        inputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBtnActionPerformed(evt);
            }
        });

        outputBtn.setText("Output folder");
        outputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputBtnActionPerformed(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        scrollPane.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPane)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(outputTextField)
                            .addComponent(inputTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(cancelBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(zipBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zipBtn)
                    .addComponent(cancelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Run new thread that starts compressing files.
     * @param evt Pressed button
     */
    private void zipBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zipBtnActionPerformed
        textArea.setText("");
        zipWorker = new ZipWorker(inputFile, outputFile, textArea);
        zipWorker.addPropertyChangeListener((final PropertyChangeEvent event) -> {
            switch (event.getPropertyName()) {
                case "progress":
                    progressBar.setIndeterminate(false);
                    progressBar.setValue((Integer) event.getNewValue());
                    break;
                case "state":
                    switch ((StateValue) event.getNewValue()) {
                        case DONE:
                            progressBar.setVisible(false);
                            cancelBtn.setEnabled(false);
                            try {
                                zipWorker.get();
                                JOptionPane.showMessageDialog(Frame.this,
                                        "Folder was compressed successfully",
                                        "Compression app",
                                        JOptionPane.INFORMATION_MESSAGE);
                            } catch (final CancellationException e) {
                                JOptionPane.showMessageDialog(Frame.this,
                                        "The compression was cancelled",
                                        "Compression app",
                                        JOptionPane.WARNING_MESSAGE);
                            } catch (final HeadlessException | InterruptedException | ExecutionException e) {
                                JOptionPane.showMessageDialog(Frame.this,
                                        "The compression failed: " + e.getMessage(),
                                        "Compression app",
                                        JOptionPane.ERROR_MESSAGE);
                            }
                            zipWorker = null;
                            break;
                        case STARTED:
                        case PENDING:
                            cancelBtn.setEnabled(true);
                            progressBar.setVisible(true);
                            progressBar.setIndeterminate(true);
                            break;
                    }
                    break;
            }
        });
        zipWorker.execute();
    }//GEN-LAST:event_zipBtnActionPerformed

    /**
     * Cancel running of thread
     * @param evt Pressed button
     */
    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        zipWorker.cancel(true);
    }//GEN-LAST:event_cancelBtnActionPerformed

    /**
     * Choose input directory
     * @param evt Pressed button
     */
    private void inputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBtnActionPerformed
        if (inputFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setInputFile(inputFileChooser.getSelectedFile());   
        }
    }//GEN-LAST:event_inputBtnActionPerformed

    /**
     * Coose output directory
     * @param evt Pressed button
     */
    private void outputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputBtnActionPerformed
        if (outputFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setOutputFile(outputFileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_outputBtnActionPerformed

    /**
     * Init variables in a program. 
     * Init filechoosers to select directories, add close window listener
     * and disable buttons that cannot be pressed before choosing folders.
     */
    private void init() {
        inputFileChooser = new JFileChooser();
        inputFileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        inputFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        inputFileChooser.setAcceptAllFileFilterUsed(false);
        outputFileChooser = new JFileChooser();
        outputFileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        outputFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        outputFileChooser.setAcceptAllFileFilterUsed(false);

        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                confirmCloseWindow();
            }
        });

        progressBar.setVisible(false);
        zipBtn.setEnabled(false);
        cancelBtn.setEnabled(false);
    }

    /**
     * Set input file/folder.
     * Check if it is not the same as output folder
     * @param inputFile Name of folder to be compressed
     */
    public void setInputFile(File inputFile) {
        if (inputFile.equals(this.outputFile)) {
            JOptionPane.showMessageDialog(this,
                "Input folder cannot be the same as output folder",
                "Compression app",
                JOptionPane.WARNING_MESSAGE);
        } else {
            this.inputFile = inputFile;
            inputTextField.setText(inputFile.getAbsolutePath());
            verifyEnable();
        }      
    }

    /**
     * Set output file/folder.
     * Check if it is not the same as input folder
     * @param outputFile Name of folder where to store compressed folder
     */
    public void setOutputFile(File outputFile) {
        if (outputFile.equals(this.inputFile)) {
            JOptionPane.showMessageDialog(this,
                "Input folder cannot be the same as output folder",
                "Compression app",
                JOptionPane.WARNING_MESSAGE);
        } else {
            this.outputFile = outputFile;
            outputTextField.setText(outputFile.getAbsolutePath());
            verifyEnable();
        }
    }

    /**
     * Verify if both folders are not null and enable zip button
     */
    private void verifyEnable() {
        if (this.inputFile != null && this.outputFile != null) {
            zipBtn.setEnabled(true);
        }
    }

    /**
     * Show warning dialog when cross is clicked and compression
     * is still in progress
     */
    private void confirmCloseWindow() {
        if (zipWorker != null && (!zipWorker.isCancelled() || !zipWorker.isDone())) {
            JOptionPane.showMessageDialog(this,
                    "Cannot close program while compression is in progress.\n"
                    + "Please wait for compression to finish or cancel it.",
                    "Compression app",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton inputBtn;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JButton outputBtn;
    private javax.swing.JTextField outputTextField;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    private javax.swing.JButton zipBtn;
    // End of variables declaration//GEN-END:variables
}
