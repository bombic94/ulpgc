/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ulpgc.eii.diu;

import java.util.concurrent.ThreadLocalRandom;

/**
 *
 * @author David
 */
public class Frame extends javax.swing.JFrame {

    private int minValue; //minimum integer value in matrix
    private int maxValue; //maximum integer value in matrix
    private int dimension; //dimension of matrix
    private int treshold; //limit, under which elements in matrix should be hidden
    
    private int[][] matrix; //2D array for storing matrix
    
    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
        update();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matrixPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        matrixTextArea = new javax.swing.JTextArea();
        controlPanel = new javax.swing.JPanel();
        dimensionLabel = new javax.swing.JLabel();
        minValLabel = new javax.swing.JLabel();
        maxValueLabel = new javax.swing.JLabel();
        dimensionTextField = new javax.swing.JTextField();
        minValTextField = new javax.swing.JTextField();
        maxValTextField = new javax.swing.JTextField();
        tresholdSlider = new javax.swing.JSlider();
        tresholdLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Square Matrix Filtration");
        setPreferredSize(new java.awt.Dimension(800, 600));

        matrixPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        matrixTextArea.setEditable(false);
        matrixTextArea.setColumns(20);
        matrixTextArea.setRows(5);
        jScrollPane1.setViewportView(matrixTextArea);

        javax.swing.GroupLayout matrixPanelLayout = new javax.swing.GroupLayout(matrixPanel);
        matrixPanel.setLayout(matrixPanelLayout);
        matrixPanelLayout.setHorizontalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        matrixPanelLayout.setVerticalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
        );

        controlPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        dimensionLabel.setText("Dimension of matrix");

        minValLabel.setText("Minimum value in matrix");

        maxValueLabel.setText("Maximum value in matrix");

        dimensionTextField.setText("7");
        dimensionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dimensionTextFieldKeyReleased(evt);
            }
        });

        minValTextField.setText("50");
        minValTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minValTextFieldKeyReleased(evt);
            }
        });

        maxValTextField.setText("120");
        maxValTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maxValTextFieldKeyReleased(evt);
            }
        });

        tresholdSlider.setMajorTickSpacing(5);
        tresholdSlider.setMinorTickSpacing(1);
        tresholdSlider.setPaintLabels(true);
        tresholdSlider.setPaintTicks(true);
        tresholdSlider.setSnapToTicks(true);
        tresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tresholdSliderStateChanged(evt);
            }
        });

        tresholdLabel.setText("Treshold");

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dimensionLabel)
                            .addComponent(minValLabel)
                            .addComponent(tresholdLabel))
                        .addGap(31, 31, 31)
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dimensionTextField)
                                    .addComponent(minValTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(maxValueLabel)
                                .addGap(32, 32, 32)
                                .addComponent(maxValTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(errorLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dimensionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minValLabel)
                    .addComponent(maxValueLabel)
                    .addComponent(maxValTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minValTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tresholdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(errorLabel)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matrixPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(matrixPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Slider changed, hide all elements which value is under treshold
     * @param evt ChangeEvent
     */
    private void tresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tresholdSliderStateChanged
        printMatrix();
    }//GEN-LAST:event_tresholdSliderStateChanged

    /**
     * Dimension input changed, update slider and matrix
     * @param evt KeyEvent
     */
    private void dimensionTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dimensionTextFieldKeyReleased
        update();
    }//GEN-LAST:event_dimensionTextFieldKeyReleased

    /**
     * Min value input changed, update slider and matrix
     * @param evt KeyEvent
     */
    private void minValTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minValTextFieldKeyReleased
        update();
    }//GEN-LAST:event_minValTextFieldKeyReleased

    /**
     * Max value input changed, update slider and matrix
     * @param evt KeyEvent
     */
    private void maxValTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxValTextFieldKeyReleased
        update();
    }//GEN-LAST:event_maxValTextFieldKeyReleased

    /**
     * This method calls three another methods:
     * First it updates slider values
     * 
     */
    private void update() {
        setTresholdValues();
        computeMatrix(); 
        printMatrix();
    }

    /**
     * Parse min and max value, check if they are positive integers,
     * check if min is less than or equal to max and if conditions are met,
     * set new slider values.
     */
    private void setTresholdValues() {
        minValue = tryParse(minValTextField.getText());
        maxValue = tryParse(maxValTextField.getText());
        if (minValue >= 0 && maxValue >= 0 && isMinLessThanOrEqualMax()){
            tresholdSlider.setMinimum(minValue);
            tresholdSlider.setMaximum(maxValue);
        }
    }
    
    /**
     * Parse min and max values, dimension value, check if all are positive integers
     * and min is less than or equal to max.
     * If dimension is greater than 10, set it to 10 (mostly for memory issues).
     * Create new matrix and fill it with generated numbers within range of min and max.
     */
    private void computeMatrix() {
        dimension = tryParse(dimensionTextField.getText()); 
        minValue = tryParse(minValTextField.getText());
        maxValue = tryParse(maxValTextField.getText());
        if (dimension >= 0 && minValue >= 0 && maxValue >= 0 && isMinLessThanOrEqualMax()){
            if (dimension > 10) {
                dimension = 10;
                dimensionTextField.setText(Integer.toString(dimension));
            }       
            
            matrix = new int[dimension][dimension];
        
            for(int i = 0; i < dimension; i++) {
                for(int j = 0; j < dimension; j++) { 
                    matrix[i][j] = ThreadLocalRandom.current().nextInt(minValue, maxValue + 1);
                }
            }
        }
    }
    
    /**
     * Get limit from treshold. Go through matrix and generate String to print.
     * If value of element is less than or equal to treshold, print '-', else print number.
     * All elements are separated by tab
     */
    private void printMatrix() {
        treshold = tresholdSlider.getValue();  
        
        String printed = "";
        for(int i = 0; i < dimension; i++) {
            for(int j = 0; j < dimension; j++) { 
                if (matrix[i][j] <= treshold) {
                    printed += "-\t";
                } else {
                    printed += matrix[i][j] + "\t";
                }
            }
            printed += "\n";
        }
        matrixTextArea.setText(printed);
    }
    
    /**
     * Parses the text to integer and checks for exception
     * @param text String input
     * @return Parsed integer from text
     */
    private Integer tryParse(String text) {
        try {
            return Integer.parseInt(text);         
        } catch (Exception e) {
            errorLabel.setText("Input must be integer value!");
            return -1;
        }
    }
    
    /**
     * Check if minimum value is less than or equal maximum value
     */
    private boolean isMinLessThanOrEqualMax() {
        if (minValue > maxValue) {
            errorLabel.setText("Minimum must not be greater than maximum value");
            return false;
        } else {
            errorLabel.setText("");
            return true;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel dimensionLabel;
    private javax.swing.JTextField dimensionTextField;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel matrixPanel;
    private javax.swing.JTextArea matrixTextArea;
    private javax.swing.JTextField maxValTextField;
    private javax.swing.JLabel maxValueLabel;
    private javax.swing.JLabel minValLabel;
    private javax.swing.JTextField minValTextField;
    private javax.swing.JLabel tresholdLabel;
    private javax.swing.JSlider tresholdSlider;
    // End of variables declaration//GEN-END:variables

}
